


# -- BUILDER 
FROM node:18.12-alpine AS builder 
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
RUN apk update

WORKDIR /app

RUN yarn global add turbo
COPY . .


RUN turbo prune --scope=web --docker



# -- INSTALLER
# # Add lockfile and package.json's of isolated subworkspace
FROM node:18.12-alpine AS installer
RUN apk add --no-cache libc6-compat
RUN apk update

WORKDIR /app

# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/yarn.lock ./yarn.lock


RUN yarn install

# # Build the project
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json

# ARG BUILD_API_URL
# ENV BUILD_API_URL=${BUILD_API_URL}
# ARG PUBLIC_API_URL
# ENV PUBLIC_API_URL=${PUBLIC_API_URL}


RUN yarn turbo run build --filter=web...



# -- RUNNER
FROM node:18.12-alpine AS runner
WORKDIR /app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser  --system --uid 1001 nextjs
USER nextjs

COPY --from=installer /app/apps/web/next.config.mjs . 
COPY --from=installer /app/apps/web/package.json .

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=installer --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public
# COPY --from=installer --chown=nextjs:nodejs /app/apps/web/public .

# ARG BUILD_API_URL
# ENV BUILD_API_URL=${BUILD_API_URL}
# ARG PUBLIC_API_URL
# ENV PUBLIC_API_URL=${PUBLIC_API_URL}

RUN ls /app
RUN ls /app/node_modules
RUN ls /app/node_modules/next
RUN ls /app/node_modules/next/dist/server/
RUN tail /app/node_modules/next/dist/server/next-server.js

CMD node apps/web/server.js

